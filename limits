#Max Low
#6-7-18
#Calculus Programming -- Finds and identifies discontinuties and graph?

from math import *


#defing the function and domain of examination
a1 = int(input("enter a start to a range"))
b1 = int(input("enter a end to a range"))
equation = input("Enter an equation")

#defining for the slope at the point and the sucessive point, h is used in the limit deffinition of a derivive
slope1 = 0
slope2 = 0
h = 0.000000001

# between zero and one will find one hundred slope measurement, set scale
numberSlopes = 0.01
tollerance = 5000

#increases to continue cmoing the slope measurements down the function
k=0

#used for definig in recondin the y value of the equation using the eval function, value then used in limit definition of a derivite
x = 0 
y1 =0
y2 =0
y3 =0
y4 =0

#used to prevent excessive skipping in the code where discontinuities are present
criticalPtorDiscontinuity = False

#doubble slash rounds down
total = (b1-a1)//numberSlopes
for i in range (0, total):
    
    
    x = (a1+(k*numberSlopes)+h)
    y1 = eval(equation)
    
    x = (a1+(k*numberSlopes))
    y2 = eval(equation)
    
    x = (a1+((k+1)*numberSlopes)+h)
    y3 = eval(equation)
    
    x = (a1+((k+1)*numberSlopes))
    y4 = eval(equation)
    
    
    slope1 = (y1-y2)/(h)
    slope2 = (y3-y4)/(h)
    
    if abs(slope1) < 0.01: #if the abs of the next point is virtually zero skip over it to avoid often non-diffenercibly pts
        print("criticalPtorDiscontinuity within +/- 0.01")
        criticalPtorDiscontinuity = True

    if abs(slope1-slope2)>tollerance:
        print("vertical Asmptote")
        k+=2
        
        
    print(a1+(k*numberSlopes))
    print(slope1)
    print(slope2)
    print(" ")
    if criticalPtorDiscontinuity == False:
        k+=1
    criticalPtorDiscontinuity = False
   
   

